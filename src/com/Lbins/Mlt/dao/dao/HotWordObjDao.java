package com.Lbins.Mlt.dao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.Lbins.Mlt.module.HotWordObj;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HOT_WORD_OBJ.
*/
public class HotWordObjDao extends AbstractDao<HotWordObj, String> {

    public static final String TABLENAME = "HOT_WORD_OBJ";

    /**
     * Properties of entity HotWordObj.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Mm_hot_word_title = new Property(0, String.class, "mm_hot_word_title", true, "MM_HOT_WORD_TITLE");
        public final static Property Mm_hot_word_id = new Property(1, String.class, "mm_hot_word_id", false, "MM_HOT_WORD_ID");
        public final static Property Mm_hot_num = new Property(2, String.class, "mm_hot_num", false, "MM_HOT_NUM");
    };

    private DaoSession daoSession;


    public HotWordObjDao(DaoConfig config) {
        super(config);
    }
    
    public HotWordObjDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HOT_WORD_OBJ' (" + //
                "'MM_HOT_WORD_TITLE' TEXT PRIMARY KEY NOT NULL ," + // 0: mm_hot_word_title
                "'MM_HOT_WORD_ID' TEXT," + // 1: mm_hot_word_id
                "'MM_HOT_NUM' TEXT);"); // 2: mm_hot_num
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HOT_WORD_OBJ'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HotWordObj entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getMm_hot_word_title());
 
        String mm_hot_word_id = entity.getMm_hot_word_id();
        if (mm_hot_word_id != null) {
            stmt.bindString(2, mm_hot_word_id);
        }
 
        String mm_hot_num = entity.getMm_hot_num();
        if (mm_hot_num != null) {
            stmt.bindString(3, mm_hot_num);
        }
    }

    @Override
    protected void attachEntity(HotWordObj entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HotWordObj readEntity(Cursor cursor, int offset) {
        HotWordObj entity = new HotWordObj( //
            cursor.getString(offset + 0), // mm_hot_word_title
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mm_hot_word_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // mm_hot_num
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HotWordObj entity, int offset) {
        entity.setMm_hot_word_title(cursor.getString(offset + 0));
        entity.setMm_hot_word_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMm_hot_num(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(HotWordObj entity, long rowId) {
        return entity.getMm_hot_word_title();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(HotWordObj entity) {
        if(entity != null) {
            return entity.getMm_hot_word_title();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
